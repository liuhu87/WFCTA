//
// File generated by rootcint at Wed May 29 21:37:15 2019

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME WFCTAEventDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "WFCTAEventDict.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void WFCTAEvent_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_WFCTAEvent(void *p = 0);
   static void *newArray_WFCTAEvent(Long_t size, void *p);
   static void delete_WFCTAEvent(void *p);
   static void deleteArray_WFCTAEvent(void *p);
   static void destruct_WFCTAEvent(void *p);
   static void streamer_WFCTAEvent(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::WFCTAEvent*)
   {
      ::WFCTAEvent *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::WFCTAEvent >(0);
      static ::ROOT::TGenericClassInfo 
         instance("WFCTAEvent", ::WFCTAEvent::Class_Version(), "./WFCTAEvent.h", 11,
                  typeid(::WFCTAEvent), DefineBehavior(ptr, ptr),
                  &::WFCTAEvent::Dictionary, isa_proxy, 0,
                  sizeof(::WFCTAEvent) );
      instance.SetNew(&new_WFCTAEvent);
      instance.SetNewArray(&newArray_WFCTAEvent);
      instance.SetDelete(&delete_WFCTAEvent);
      instance.SetDeleteArray(&deleteArray_WFCTAEvent);
      instance.SetDestructor(&destruct_WFCTAEvent);
      instance.SetStreamerFunc(&streamer_WFCTAEvent);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::WFCTAEvent*)
   {
      return GenerateInitInstanceLocal((::WFCTAEvent*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::WFCTAEvent*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *WFCTAEvent::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *WFCTAEvent::Class_Name()
{
   return "WFCTAEvent";
}

//______________________________________________________________________________
const char *WFCTAEvent::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::WFCTAEvent*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int WFCTAEvent::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::WFCTAEvent*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void WFCTAEvent::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::WFCTAEvent*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *WFCTAEvent::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::WFCTAEvent*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void WFCTAEvent::Streamer(TBuffer &R__b)
{
   // Stream an object of class WFCTAEvent.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      R__b >> iEvent;
      R__b >> rabbitTime;
      R__b >> rabbittime;
      {
         vector<short> &R__stl =  iSiPM;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            short R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<bool> &R__stl =  gain_marker;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            bool R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<char> &R__stl =  peak;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            char R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<char> &R__stl =  mypeak;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            char R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<short> &R__stl =  Single_Threshold;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            short R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<short> &R__stl =  Record_Threshold;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            short R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<bool> &R__stl =  Over_Single_Marker;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            bool R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<bool> &R__stl =  Over_Record_Marker;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            bool R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<float> &R__stl =  ADC_Cut;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<float> &R__stl =  ImageBaseHigh;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<float> &R__stl =  ImageBaseLow;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<float> &R__stl =  ImageAdcHigh;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<float> &R__stl =  ImageAdcLow;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<float> &R__stl =  myImageBaseHigh;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<float> &R__stl =  myImageBaseLow;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<float> &R__stl =  myImageAdcHigh;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<float> &R__stl =  myImageAdcLow;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      R__b.CheckByteCount(R__s, R__c, WFCTAEvent::IsA());
   } else {
      R__c = R__b.WriteVersion(WFCTAEvent::IsA(), kTRUE);
      R__b << iEvent;
      R__b << rabbitTime;
      R__b << rabbittime;
      {
         vector<short> &R__stl =  iSiPM;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<short>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<bool> &R__stl =  gain_marker;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<bool>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<char> &R__stl =  peak;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<char>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<char> &R__stl =  mypeak;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<char>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<short> &R__stl =  Single_Threshold;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<short>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<short> &R__stl =  Record_Threshold;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<short>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<bool> &R__stl =  Over_Single_Marker;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<bool>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<bool> &R__stl =  Over_Record_Marker;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<bool>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<float> &R__stl =  ADC_Cut;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<float>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<float> &R__stl =  ImageBaseHigh;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<float>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<float> &R__stl =  ImageBaseLow;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<float>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<float> &R__stl =  ImageAdcHigh;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<float>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<float> &R__stl =  ImageAdcLow;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<float>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<float> &R__stl =  myImageBaseHigh;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<float>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<float> &R__stl =  myImageBaseLow;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<float>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<float> &R__stl =  myImageAdcHigh;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<float>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<float> &R__stl =  myImageAdcLow;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<float>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void WFCTAEvent::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class WFCTAEvent.
      TClass *R__cl = ::WFCTAEvent::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iEvent", &iEvent);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rabbitTime", &rabbitTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rabbittime", &rabbittime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iSiPM", (void*)&iSiPM);
      R__insp.InspectMember("vector<short>", (void*)&iSiPM, "iSiPM.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gain_marker", (void*)&gain_marker);
      R__insp.InspectMember("vector<bool>", (void*)&gain_marker, "gain_marker.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "peak", (void*)&peak);
      R__insp.InspectMember("vector<char>", (void*)&peak, "peak.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mypeak", (void*)&mypeak);
      R__insp.InspectMember("vector<char>", (void*)&mypeak, "mypeak.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Single_Threshold", (void*)&Single_Threshold);
      R__insp.InspectMember("vector<short>", (void*)&Single_Threshold, "Single_Threshold.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Record_Threshold", (void*)&Record_Threshold);
      R__insp.InspectMember("vector<short>", (void*)&Record_Threshold, "Record_Threshold.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Over_Single_Marker", (void*)&Over_Single_Marker);
      R__insp.InspectMember("vector<bool>", (void*)&Over_Single_Marker, "Over_Single_Marker.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Over_Record_Marker", (void*)&Over_Record_Marker);
      R__insp.InspectMember("vector<bool>", (void*)&Over_Record_Marker, "Over_Record_Marker.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ADC_Cut", (void*)&ADC_Cut);
      R__insp.InspectMember("vector<float>", (void*)&ADC_Cut, "ADC_Cut.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ImageBaseHigh", (void*)&ImageBaseHigh);
      R__insp.InspectMember("vector<float>", (void*)&ImageBaseHigh, "ImageBaseHigh.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ImageBaseLow", (void*)&ImageBaseLow);
      R__insp.InspectMember("vector<float>", (void*)&ImageBaseLow, "ImageBaseLow.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ImageAdcHigh", (void*)&ImageAdcHigh);
      R__insp.InspectMember("vector<float>", (void*)&ImageAdcHigh, "ImageAdcHigh.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ImageAdcLow", (void*)&ImageAdcLow);
      R__insp.InspectMember("vector<float>", (void*)&ImageAdcLow, "ImageAdcLow.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "myImageBaseHigh", (void*)&myImageBaseHigh);
      R__insp.InspectMember("vector<float>", (void*)&myImageBaseHigh, "myImageBaseHigh.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "myImageBaseLow", (void*)&myImageBaseLow);
      R__insp.InspectMember("vector<float>", (void*)&myImageBaseLow, "myImageBaseLow.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "myImageAdcHigh", (void*)&myImageAdcHigh);
      R__insp.InspectMember("vector<float>", (void*)&myImageAdcHigh, "myImageAdcHigh.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "myImageAdcLow", (void*)&myImageAdcLow);
      R__insp.InspectMember("vector<float>", (void*)&myImageAdcLow, "myImageAdcLow.", false);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_WFCTAEvent(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::WFCTAEvent : new ::WFCTAEvent;
   }
   static void *newArray_WFCTAEvent(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::WFCTAEvent[nElements] : new ::WFCTAEvent[nElements];
   }
   // Wrapper around operator delete
   static void delete_WFCTAEvent(void *p) {
      delete ((::WFCTAEvent*)p);
   }
   static void deleteArray_WFCTAEvent(void *p) {
      delete [] ((::WFCTAEvent*)p);
   }
   static void destruct_WFCTAEvent(void *p) {
      typedef ::WFCTAEvent current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_WFCTAEvent(TBuffer &buf, void *obj) {
      ((::WFCTAEvent*)obj)->::WFCTAEvent::Streamer(buf);
   }
} // end of namespace ROOT for class ::WFCTAEvent

namespace ROOT {
   void vectorlEboolgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEboolgR_Dictionary();
   static void *new_vectorlEboolgR(void *p = 0);
   static void *newArray_vectorlEboolgR(Long_t size, void *p);
   static void delete_vectorlEboolgR(void *p);
   static void deleteArray_vectorlEboolgR(void *p);
   static void destruct_vectorlEboolgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<bool>*)
   {
      vector<bool> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<bool>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<bool>", -2, "vectorbool.dll", 0,
                  typeid(vector<bool>), DefineBehavior(ptr, ptr),
                  0, &vectorlEboolgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<bool>) );
      instance.SetNew(&new_vectorlEboolgR);
      instance.SetNewArray(&newArray_vectorlEboolgR);
      instance.SetDelete(&delete_vectorlEboolgR);
      instance.SetDeleteArray(&deleteArray_vectorlEboolgR);
      instance.SetDestructor(&destruct_vectorlEboolgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<bool> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<bool>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEboolgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<bool>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEboolgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<bool> : new vector<bool>;
   }
   static void *newArray_vectorlEboolgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<bool>[nElements] : new vector<bool>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEboolgR(void *p) {
      delete ((vector<bool>*)p);
   }
   static void deleteArray_vectorlEboolgR(void *p) {
      delete [] ((vector<bool>*)p);
   }
   static void destruct_vectorlEboolgR(void *p) {
      typedef vector<bool> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<bool>

namespace ROOT {
   void vectorlEchargR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEchargR_Dictionary();
   static void *new_vectorlEchargR(void *p = 0);
   static void *newArray_vectorlEchargR(Long_t size, void *p);
   static void delete_vectorlEchargR(void *p);
   static void deleteArray_vectorlEchargR(void *p);
   static void destruct_vectorlEchargR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<char>*)
   {
      vector<char> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<char>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<char>", -2, "vector.dll", 0,
                  typeid(vector<char>), DefineBehavior(ptr, ptr),
                  0, &vectorlEchargR_Dictionary, isa_proxy, 0,
                  sizeof(vector<char>) );
      instance.SetNew(&new_vectorlEchargR);
      instance.SetNewArray(&newArray_vectorlEchargR);
      instance.SetDelete(&delete_vectorlEchargR);
      instance.SetDeleteArray(&deleteArray_vectorlEchargR);
      instance.SetDestructor(&destruct_vectorlEchargR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<char> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<char>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEchargR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<char>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEchargR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<char> : new vector<char>;
   }
   static void *newArray_vectorlEchargR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<char>[nElements] : new vector<char>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEchargR(void *p) {
      delete ((vector<char>*)p);
   }
   static void deleteArray_vectorlEchargR(void *p) {
      delete [] ((vector<char>*)p);
   }
   static void destruct_vectorlEchargR(void *p) {
      typedef vector<char> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<char>

namespace ROOT {
   void vectorlEfloatgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEfloatgR_Dictionary();
   static void *new_vectorlEfloatgR(void *p = 0);
   static void *newArray_vectorlEfloatgR(Long_t size, void *p);
   static void delete_vectorlEfloatgR(void *p);
   static void deleteArray_vectorlEfloatgR(void *p);
   static void destruct_vectorlEfloatgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<float>*)
   {
      vector<float> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<float>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<float>", -2, "vector.dll", 0,
                  typeid(vector<float>), DefineBehavior(ptr, ptr),
                  0, &vectorlEfloatgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<float>) );
      instance.SetNew(&new_vectorlEfloatgR);
      instance.SetNewArray(&newArray_vectorlEfloatgR);
      instance.SetDelete(&delete_vectorlEfloatgR);
      instance.SetDeleteArray(&deleteArray_vectorlEfloatgR);
      instance.SetDestructor(&destruct_vectorlEfloatgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<float> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<float>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEfloatgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<float>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEfloatgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<float> : new vector<float>;
   }
   static void *newArray_vectorlEfloatgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<float>[nElements] : new vector<float>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEfloatgR(void *p) {
      delete ((vector<float>*)p);
   }
   static void deleteArray_vectorlEfloatgR(void *p) {
      delete [] ((vector<float>*)p);
   }
   static void destruct_vectorlEfloatgR(void *p) {
      typedef vector<float> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<float>

namespace ROOT {
   void vectorlEshortgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEshortgR_Dictionary();
   static void *new_vectorlEshortgR(void *p = 0);
   static void *newArray_vectorlEshortgR(Long_t size, void *p);
   static void delete_vectorlEshortgR(void *p);
   static void deleteArray_vectorlEshortgR(void *p);
   static void destruct_vectorlEshortgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<short>*)
   {
      vector<short> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<short>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<short>", -2, "vector.dll", 0,
                  typeid(vector<short>), DefineBehavior(ptr, ptr),
                  0, &vectorlEshortgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<short>) );
      instance.SetNew(&new_vectorlEshortgR);
      instance.SetNewArray(&newArray_vectorlEshortgR);
      instance.SetDelete(&delete_vectorlEshortgR);
      instance.SetDeleteArray(&deleteArray_vectorlEshortgR);
      instance.SetDestructor(&destruct_vectorlEshortgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<short> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<short>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEshortgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<short>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEshortgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<short> : new vector<short>;
   }
   static void *newArray_vectorlEshortgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<short>[nElements] : new vector<short>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEshortgR(void *p) {
      delete ((vector<short>*)p);
   }
   static void deleteArray_vectorlEshortgR(void *p) {
      delete [] ((vector<short>*)p);
   }
   static void destruct_vectorlEshortgR(void *p) {
      typedef vector<short> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<short>

/********************************************************
* WFCTAEventDict.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableWFCTAEventDict();

extern "C" void G__set_cpp_environmentWFCTAEventDict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("WFCTAEvent.h");
  G__cpp_reset_tagtableWFCTAEventDict();
}
#include <new>
extern "C" int G__cpp_dllrevWFCTAEventDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* WFCTAEvent */
static int G__WFCTAEventDict_403_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   WFCTAEvent* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new WFCTAEvent[n];
     } else {
       p = new((void*) gvp) WFCTAEvent[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new WFCTAEvent;
     } else {
       p = new((void*) gvp) WFCTAEvent;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__WFCTAEventDictLN_WFCTAEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WFCTAEvent*) G__getstructoffset())->EventInitial();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WFCTAEvent*) G__getstructoffset())->StatusInitial();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WFCTAEvent*) G__getstructoffset())->SetEvent((long) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WFCTAEvent*) G__getstructoffset())->SetrabbitTime((long) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WFCTAEvent*) G__getstructoffset())->Setrabbittime((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WFCTAEvent*) G__getstructoffset())->SetSiPM((short) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WFCTAEvent*) G__getstructoffset())->Setgain_marker((bool) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WFCTAEvent*) G__getstructoffset())->Setpeak((char) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WFCTAEvent*) G__getstructoffset())->Setmypeak((char) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WFCTAEvent*) G__getstructoffset())->SetSingle_Threshold((short) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WFCTAEvent*) G__getstructoffset())->SetRecord_Threshold((short) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WFCTAEvent*) G__getstructoffset())->SetOver_Single_Marker((bool) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WFCTAEvent*) G__getstructoffset())->SetOver_Record_Marker((bool) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WFCTAEvent*) G__getstructoffset())->SetADC_Cut((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WFCTAEvent*) G__getstructoffset())->SetImageBaseHigh((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WFCTAEvent*) G__getstructoffset())->SetImageBaseLow((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WFCTAEvent*) G__getstructoffset())->SetImageAdcHigh((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WFCTAEvent*) G__getstructoffset())->SetImageAdcLow((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WFCTAEvent*) G__getstructoffset())->SetmyImageBaseHigh((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WFCTAEvent*) G__getstructoffset())->SetmyImageBaseLow((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WFCTAEvent*) G__getstructoffset())->SetmyImageAdcHigh((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WFCTAEvent*) G__getstructoffset())->SetmyImageAdcLow((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) WFCTAEvent::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) WFCTAEvent::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) WFCTAEvent::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      WFCTAEvent::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const WFCTAEvent*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WFCTAEvent*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WFCTAEvent*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WFCTAEvent*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) WFCTAEvent::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) WFCTAEvent::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) WFCTAEvent::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) WFCTAEvent::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__WFCTAEventDict_403_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   WFCTAEvent* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new WFCTAEvent(*(WFCTAEvent*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__WFCTAEventDictLN_WFCTAEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef WFCTAEvent G__TWFCTAEvent;
static int G__WFCTAEventDict_403_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (WFCTAEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((WFCTAEvent*) (soff+(sizeof(WFCTAEvent)*i)))->~G__TWFCTAEvent();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (WFCTAEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((WFCTAEvent*) (soff))->~G__TWFCTAEvent();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__WFCTAEventDict_403_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   WFCTAEvent* dest = (WFCTAEvent*) G__getstructoffset();
   *dest = *(WFCTAEvent*) libp->para[0].ref;
   const WFCTAEvent& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* WFCTAEvent */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncWFCTAEventDict {
 public:
  G__Sizep2memfuncWFCTAEventDict(): p(&G__Sizep2memfuncWFCTAEventDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncWFCTAEventDict::*p)();
};

size_t G__get_sizep2memfuncWFCTAEventDict()
{
  G__Sizep2memfuncWFCTAEventDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceWFCTAEventDict() {

   /* Setting up class inheritance */
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableWFCTAEventDict() {

   /* Setting up typedef entry */
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__WFCTAEventDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__WFCTAEventDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__WFCTAEventDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__WFCTAEventDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__WFCTAEventDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__WFCTAEventDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__WFCTAEventDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__WFCTAEventDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__WFCTAEventDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__WFCTAEventDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* WFCTAEvent */
static void G__setup_memvarWFCTAEvent(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__WFCTAEventDictLN_WFCTAEvent));
   { WFCTAEvent *p; p=(WFCTAEvent*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->iEvent)-(long)(p)),108,0,0,-1,-1,-1,1,"iEvent=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->rabbitTime)-(long)(p)),108,0,0,-1,-1,-1,1,"rabbitTime=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->rabbittime)-(long)(p)),100,0,0,-1,-1,-1,1,"rabbittime=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->iSiPM)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__WFCTAEventDictLN_vectorlEshortcOallocatorlEshortgRsPgR),G__defined_typename("vector<short>"),-1,1,"iSiPM=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->gain_marker)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__WFCTAEventDictLN_vectorlEboolcOallocatorlEboolgRsPgR),G__defined_typename("vector<bool>"),-1,1,"gain_marker=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->peak)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__WFCTAEventDictLN_vectorlEcharcOallocatorlEchargRsPgR),G__defined_typename("vector<char>"),-1,1,"peak=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mypeak)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__WFCTAEventDictLN_vectorlEcharcOallocatorlEchargRsPgR),G__defined_typename("vector<char>"),-1,1,"mypeak=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Single_Threshold)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__WFCTAEventDictLN_vectorlEshortcOallocatorlEshortgRsPgR),G__defined_typename("vector<short>"),-1,1,"Single_Threshold=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Record_Threshold)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__WFCTAEventDictLN_vectorlEshortcOallocatorlEshortgRsPgR),G__defined_typename("vector<short>"),-1,1,"Record_Threshold=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Over_Single_Marker)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__WFCTAEventDictLN_vectorlEboolcOallocatorlEboolgRsPgR),G__defined_typename("vector<bool>"),-1,1,"Over_Single_Marker=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Over_Record_Marker)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__WFCTAEventDictLN_vectorlEboolcOallocatorlEboolgRsPgR),G__defined_typename("vector<bool>"),-1,1,"Over_Record_Marker=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ADC_Cut)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__WFCTAEventDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<float>"),-1,1,"ADC_Cut=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ImageBaseHigh)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__WFCTAEventDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<float>"),-1,1,"ImageBaseHigh=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ImageBaseLow)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__WFCTAEventDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<float>"),-1,1,"ImageBaseLow=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ImageAdcHigh)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__WFCTAEventDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<float>"),-1,1,"ImageAdcHigh=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ImageAdcLow)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__WFCTAEventDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<float>"),-1,1,"ImageAdcLow=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->myImageBaseHigh)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__WFCTAEventDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<float>"),-1,1,"myImageBaseHigh=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->myImageBaseLow)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__WFCTAEventDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<float>"),-1,1,"myImageBaseLow=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->myImageAdcHigh)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__WFCTAEventDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<float>"),-1,1,"myImageAdcHigh=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->myImageAdcLow)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__WFCTAEventDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<float>"),-1,1,"myImageAdcLow=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__WFCTAEventDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarWFCTAEventDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncWFCTAEvent(void) {
   /* WFCTAEvent */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__WFCTAEventDictLN_WFCTAEvent));
   G__memfunc_setup("WFCTAEvent",887,G__WFCTAEventDict_403_0_1, 105, G__get_linked_tagnum(&G__WFCTAEventDictLN_WFCTAEvent), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EventInitial",1228,G__WFCTAEventDict_403_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("StatusInitial",1358,G__WFCTAEventDict_403_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEvent",814,G__WFCTAEventDict_403_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "l - - 0 - event", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetrabbitTime",1327,G__WFCTAEventDict_403_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "l - - 0 - rabTime", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Setrabbittime",1359,G__WFCTAEventDict_403_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - rabtime", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSiPM",645,G__WFCTAEventDict_403_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "s - - 0 - SiPM", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Setgain_marker",1452,G__WFCTAEventDict_403_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 - w_gain_marker", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Setpeak",717,G__WFCTAEventDict_403_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "c - - 0 - w_peak", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Setmypeak",947,G__WFCTAEventDict_403_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "c - - 0 - w_mypeak", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSingle_Threshold",1946,G__WFCTAEventDict_403_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "s - - 0 - w_Single_Threshold", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRecord_Threshold",1943,G__WFCTAEventDict_403_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "s - - 0 - w_Record_Threshold", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetOver_Single_Marker",2122,G__WFCTAEventDict_403_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 - w_Over_Single_Marker", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetOver_Record_Marker",2119,G__WFCTAEventDict_403_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 - w_Over_Record_Marker", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetADC_Cut",895,G__WFCTAEventDict_403_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - w_ADC_Cut", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetImageBaseHigh",1546,G__WFCTAEventDict_403_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - w_ImageBaseHigh", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetImageBaseLow",1468,G__WFCTAEventDict_403_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - w_ImageBaseLow", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetImageAdcHigh",1431,G__WFCTAEventDict_403_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - w_ImageAdcHigh", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetImageAdcLow",1353,G__WFCTAEventDict_403_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - w_ImageAdcLow", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetmyImageBaseHigh",1776,G__WFCTAEventDict_403_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - w_myImageBaseHigh", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetmyImageBaseLow",1698,G__WFCTAEventDict_403_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - w_myImageBaseLow", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetmyImageAdcHigh",1661,G__WFCTAEventDict_403_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - w_myImageAdcHigh", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetmyImageAdcLow",1583,G__WFCTAEventDict_403_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - w_myImageAdcLow", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__WFCTAEventDict_403_0_24, 85, G__get_linked_tagnum(&G__WFCTAEventDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&WFCTAEvent::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__WFCTAEventDict_403_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&WFCTAEvent::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__WFCTAEventDict_403_0_26, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&WFCTAEvent::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__WFCTAEventDict_403_0_27, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&WFCTAEvent::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__WFCTAEventDict_403_0_28, 85, G__get_linked_tagnum(&G__WFCTAEventDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__WFCTAEventDict_403_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__WFCTAEventDict_403_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__WFCTAEventDict_403_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__WFCTAEventDict_403_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&WFCTAEvent::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__WFCTAEventDict_403_0_33, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&WFCTAEvent::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__WFCTAEventDict_403_0_34, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&WFCTAEvent::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__WFCTAEventDict_403_0_35, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&WFCTAEvent::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("WFCTAEvent", 887, G__WFCTAEventDict_403_0_36, (int) ('i'), G__get_linked_tagnum(&G__WFCTAEventDictLN_WFCTAEvent), -1, 0, 1, 1, 1, 0, "u 'WFCTAEvent' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~WFCTAEvent", 1013, G__WFCTAEventDict_403_0_37, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__WFCTAEventDict_403_0_38, (int) ('u'), G__get_linked_tagnum(&G__WFCTAEventDictLN_WFCTAEvent), -1, 1, 1, 1, 1, 0, "u 'WFCTAEvent' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncWFCTAEventDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalWFCTAEventDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcWFCTAEventDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__WFCTAEventDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__WFCTAEventDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__WFCTAEventDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__WFCTAEventDictLN_vectorlEcharcOallocatorlEchargRsPgR = { "vector<char,allocator<char> >" , 99 , -1 };
G__linked_taginfo G__WFCTAEventDictLN_vectorlEshortcOallocatorlEshortgRsPgR = { "vector<short,allocator<short> >" , 99 , -1 };
G__linked_taginfo G__WFCTAEventDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR = { "vector<float,allocator<float> >" , 99 , -1 };
G__linked_taginfo G__WFCTAEventDictLN_vectorlEboolcOallocatorlEboolgRsPgR = { "vector<bool,allocator<bool> >" , 99 , -1 };
G__linked_taginfo G__WFCTAEventDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__WFCTAEventDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__WFCTAEventDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__WFCTAEventDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__WFCTAEventDictLN_WFCTAEvent = { "WFCTAEvent" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableWFCTAEventDict() {
  G__WFCTAEventDictLN_TClass.tagnum = -1 ;
  G__WFCTAEventDictLN_TBuffer.tagnum = -1 ;
  G__WFCTAEventDictLN_TMemberInspector.tagnum = -1 ;
  G__WFCTAEventDictLN_vectorlEcharcOallocatorlEchargRsPgR.tagnum = -1 ;
  G__WFCTAEventDictLN_vectorlEshortcOallocatorlEshortgRsPgR.tagnum = -1 ;
  G__WFCTAEventDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR.tagnum = -1 ;
  G__WFCTAEventDictLN_vectorlEboolcOallocatorlEboolgRsPgR.tagnum = -1 ;
  G__WFCTAEventDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__WFCTAEventDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__WFCTAEventDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__WFCTAEventDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__WFCTAEventDictLN_WFCTAEvent.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableWFCTAEventDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__WFCTAEventDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__WFCTAEventDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__WFCTAEventDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__WFCTAEventDictLN_vectorlEcharcOallocatorlEchargRsPgR);
   G__get_linked_tagnum_fwd(&G__WFCTAEventDictLN_vectorlEshortcOallocatorlEshortgRsPgR);
   G__get_linked_tagnum_fwd(&G__WFCTAEventDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR);
   G__get_linked_tagnum_fwd(&G__WFCTAEventDictLN_vectorlEboolcOallocatorlEboolgRsPgR);
   G__get_linked_tagnum_fwd(&G__WFCTAEventDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__WFCTAEventDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__WFCTAEventDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__WFCTAEventDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__WFCTAEventDictLN_WFCTAEvent),sizeof(WFCTAEvent),-1,1280,(char*)NULL,G__setup_memvarWFCTAEvent,G__setup_memfuncWFCTAEvent);
}
extern "C" void G__cpp_setupWFCTAEventDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupWFCTAEventDict()");
  G__set_cpp_environmentWFCTAEventDict();
  G__cpp_setup_tagtableWFCTAEventDict();

  G__cpp_setup_inheritanceWFCTAEventDict();

  G__cpp_setup_typetableWFCTAEventDict();

  G__cpp_setup_memvarWFCTAEventDict();

  G__cpp_setup_memfuncWFCTAEventDict();
  G__cpp_setup_globalWFCTAEventDict();
  G__cpp_setup_funcWFCTAEventDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncWFCTAEventDict();
  return;
}
class G__cpp_setup_initWFCTAEventDict {
  public:
    G__cpp_setup_initWFCTAEventDict() { G__add_setup_func("WFCTAEventDict",(G__incsetup)(&G__cpp_setupWFCTAEventDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initWFCTAEventDict() { G__remove_setup_func("WFCTAEventDict"); }
};
G__cpp_setup_initWFCTAEventDict G__cpp_setup_initializerWFCTAEventDict;

