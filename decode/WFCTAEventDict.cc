//
// File generated by rootcint at Tue Apr 30 15:11:49 2019

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME WFCTAEventDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "WFCTAEventDict.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void WFCTAEvent_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_WFCTAEvent(void *p = 0);
   static void *newArray_WFCTAEvent(Long_t size, void *p);
   static void delete_WFCTAEvent(void *p);
   static void deleteArray_WFCTAEvent(void *p);
   static void destruct_WFCTAEvent(void *p);
   static void streamer_WFCTAEvent(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::WFCTAEvent*)
   {
      ::WFCTAEvent *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::WFCTAEvent >(0);
      static ::ROOT::TGenericClassInfo 
         instance("WFCTAEvent", ::WFCTAEvent::Class_Version(), "./WFCTAEvent.h", 10,
                  typeid(::WFCTAEvent), DefineBehavior(ptr, ptr),
                  &::WFCTAEvent::Dictionary, isa_proxy, 0,
                  sizeof(::WFCTAEvent) );
      instance.SetNew(&new_WFCTAEvent);
      instance.SetNewArray(&newArray_WFCTAEvent);
      instance.SetDelete(&delete_WFCTAEvent);
      instance.SetDeleteArray(&deleteArray_WFCTAEvent);
      instance.SetDestructor(&destruct_WFCTAEvent);
      instance.SetStreamerFunc(&streamer_WFCTAEvent);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::WFCTAEvent*)
   {
      return GenerateInitInstanceLocal((::WFCTAEvent*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::WFCTAEvent*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *WFCTAEvent::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *WFCTAEvent::Class_Name()
{
   return "WFCTAEvent";
}

//______________________________________________________________________________
const char *WFCTAEvent::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::WFCTAEvent*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int WFCTAEvent::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::WFCTAEvent*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void WFCTAEvent::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::WFCTAEvent*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *WFCTAEvent::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::WFCTAEvent*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void WFCTAEvent::Streamer(TBuffer &R__b)
{
   // Stream an object of class WFCTAEvent.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      { TString R__str; R__str.Streamer(R__b); fFileName = R__str.Data(); }
      R__b.StreamObject(&(fInputStream),typeid(ifstream));
      R__b >> temp;
      {
         vector<long> &R__stl =  bigpackagehead;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            long R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<int> &R__stl =  littlepackage;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<long> &R__stl =  bigpackagetail;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            long R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<long> &R__stl =  fpgapackage;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            long R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<long> &R__stl =  clb85package;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            long R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<long> &R__stl =  clb_db_package;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            long R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      R__b >> jude;
      {
         vector<short> &R__stl =  WSiPM;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            short R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      R__b >> WEvent;
      {
         vector<short> &R__stl =  WSC;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            short R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<short> &R__stl =  WChannel;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            short R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      R__b >> WrabbitTime;
      R__b >> Wrabbittime;
      R__b >> Wpackagenum;
      {
         vector<bool> &R__stl =  Wgain_marker;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            bool R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<char> &R__stl =  Wpeak;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            char R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<char> &R__stl =  Wmypeak;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            char R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<short> &R__stl =  WSingle_Threshold;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            short R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<short> &R__stl =  WRecord_Threshold;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            short R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<bool> &R__stl =  WOver_Single_Marker;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            bool R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<bool> &R__stl =  WOver_Record_Marker;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            bool R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<float> &R__stl =  WADC_Cut;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<float> &R__stl =  WImageBaseHigh;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<float> &R__stl =  WImageBaseLow;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<float> &R__stl =  WImageAdcHigh;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<float> &R__stl =  WImageAdcLow;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<float> &R__stl =  WmyImageBaseHigh;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<float> &R__stl =  WmyImageBaseLow;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<float> &R__stl =  WmyImageAdcHigh;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<float> &R__stl =  WmyImageAdcLow;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      R__b >> s_SC;
      R__b >> Wclb_initial_Time;
      R__b >> Wclb_initial_time;
      R__b >> Wfired_tube;
      R__b >> Wstatus_readback_Time;
      R__b >> Wstatus_readback_time;
      R__b >> WDbTemp;
      R__b >> Wsingle_time;
      R__b >> WClbTime;
      R__b >> WClbTemp;
      R__b.CheckByteCount(R__s, R__c, WFCTAEvent::IsA());
   } else {
      R__c = R__b.WriteVersion(WFCTAEvent::IsA(), kTRUE);
      { TString R__str = fFileName.c_str(); R__str.Streamer(R__b);}
      R__b.StreamObject(&(fInputStream),typeid(ifstream));
      R__b << temp;
      {
         vector<long> &R__stl =  bigpackagehead;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<long>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<int> &R__stl =  littlepackage;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<int>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<long> &R__stl =  bigpackagetail;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<long>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<long> &R__stl =  fpgapackage;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<long>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<long> &R__stl =  clb85package;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<long>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<long> &R__stl =  clb_db_package;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<long>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b << jude;
      {
         vector<short> &R__stl =  WSiPM;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<short>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b << WEvent;
      {
         vector<short> &R__stl =  WSC;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<short>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<short> &R__stl =  WChannel;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<short>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b << WrabbitTime;
      R__b << Wrabbittime;
      R__b << Wpackagenum;
      {
         vector<bool> &R__stl =  Wgain_marker;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<bool>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<char> &R__stl =  Wpeak;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<char>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<char> &R__stl =  Wmypeak;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<char>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<short> &R__stl =  WSingle_Threshold;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<short>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<short> &R__stl =  WRecord_Threshold;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<short>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<bool> &R__stl =  WOver_Single_Marker;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<bool>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<bool> &R__stl =  WOver_Record_Marker;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<bool>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<float> &R__stl =  WADC_Cut;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<float>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<float> &R__stl =  WImageBaseHigh;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<float>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<float> &R__stl =  WImageBaseLow;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<float>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<float> &R__stl =  WImageAdcHigh;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<float>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<float> &R__stl =  WImageAdcLow;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<float>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<float> &R__stl =  WmyImageBaseHigh;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<float>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<float> &R__stl =  WmyImageBaseLow;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<float>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<float> &R__stl =  WmyImageAdcHigh;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<float>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<float> &R__stl =  WmyImageAdcLow;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<float>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b << s_SC;
      R__b << Wclb_initial_Time;
      R__b << Wclb_initial_time;
      R__b << Wfired_tube;
      R__b << Wstatus_readback_Time;
      R__b << Wstatus_readback_time;
      R__b << WDbTemp;
      R__b << Wsingle_time;
      R__b << WClbTime;
      R__b << WClbTemp;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void WFCTAEvent::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class WFCTAEvent.
      TClass *R__cl = ::WFCTAEvent::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFileName", (void*)&fFileName);
      R__insp.InspectMember("string", (void*)&fFileName, "fFileName.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fInputStream", (void*)&fInputStream);
      R__insp.InspectMember("ifstream", (void*)&fInputStream, "fInputStream.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "temp", &temp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "bigpackagehead", (void*)&bigpackagehead);
      R__insp.InspectMember("vector<long>", (void*)&bigpackagehead, "bigpackagehead.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "littlepackage", (void*)&littlepackage);
      R__insp.InspectMember("vector<int>", (void*)&littlepackage, "littlepackage.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "bigpackagetail", (void*)&bigpackagetail);
      R__insp.InspectMember("vector<long>", (void*)&bigpackagetail, "bigpackagetail.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fpgapackage", (void*)&fpgapackage);
      R__insp.InspectMember("vector<long>", (void*)&fpgapackage, "fpgapackage.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "clb85package", (void*)&clb85package);
      R__insp.InspectMember("vector<long>", (void*)&clb85package, "clb85package.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "clb_db_package", (void*)&clb_db_package);
      R__insp.InspectMember("vector<long>", (void*)&clb_db_package, "clb_db_package.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "jude", &jude);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "WSiPM", (void*)&WSiPM);
      R__insp.InspectMember("vector<short>", (void*)&WSiPM, "WSiPM.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "WEvent", &WEvent);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "WSC", (void*)&WSC);
      R__insp.InspectMember("vector<short>", (void*)&WSC, "WSC.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "WChannel", (void*)&WChannel);
      R__insp.InspectMember("vector<short>", (void*)&WChannel, "WChannel.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "WrabbitTime", &WrabbitTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Wrabbittime", &Wrabbittime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Wpackagenum", &Wpackagenum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Wgain_marker", (void*)&Wgain_marker);
      R__insp.InspectMember("vector<bool>", (void*)&Wgain_marker, "Wgain_marker.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Wpeak", (void*)&Wpeak);
      R__insp.InspectMember("vector<char>", (void*)&Wpeak, "Wpeak.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Wmypeak", (void*)&Wmypeak);
      R__insp.InspectMember("vector<char>", (void*)&Wmypeak, "Wmypeak.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "WSingle_Threshold", (void*)&WSingle_Threshold);
      R__insp.InspectMember("vector<short>", (void*)&WSingle_Threshold, "WSingle_Threshold.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "WRecord_Threshold", (void*)&WRecord_Threshold);
      R__insp.InspectMember("vector<short>", (void*)&WRecord_Threshold, "WRecord_Threshold.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "WOver_Single_Marker", (void*)&WOver_Single_Marker);
      R__insp.InspectMember("vector<bool>", (void*)&WOver_Single_Marker, "WOver_Single_Marker.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "WOver_Record_Marker", (void*)&WOver_Record_Marker);
      R__insp.InspectMember("vector<bool>", (void*)&WOver_Record_Marker, "WOver_Record_Marker.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "WADC_Cut", (void*)&WADC_Cut);
      R__insp.InspectMember("vector<float>", (void*)&WADC_Cut, "WADC_Cut.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "WImageBaseHigh", (void*)&WImageBaseHigh);
      R__insp.InspectMember("vector<float>", (void*)&WImageBaseHigh, "WImageBaseHigh.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "WImageBaseLow", (void*)&WImageBaseLow);
      R__insp.InspectMember("vector<float>", (void*)&WImageBaseLow, "WImageBaseLow.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "WImageAdcHigh", (void*)&WImageAdcHigh);
      R__insp.InspectMember("vector<float>", (void*)&WImageAdcHigh, "WImageAdcHigh.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "WImageAdcLow", (void*)&WImageAdcLow);
      R__insp.InspectMember("vector<float>", (void*)&WImageAdcLow, "WImageAdcLow.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "WmyImageBaseHigh", (void*)&WmyImageBaseHigh);
      R__insp.InspectMember("vector<float>", (void*)&WmyImageBaseHigh, "WmyImageBaseHigh.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "WmyImageBaseLow", (void*)&WmyImageBaseLow);
      R__insp.InspectMember("vector<float>", (void*)&WmyImageBaseLow, "WmyImageBaseLow.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "WmyImageAdcHigh", (void*)&WmyImageAdcHigh);
      R__insp.InspectMember("vector<float>", (void*)&WmyImageAdcHigh, "WmyImageAdcHigh.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "WmyImageAdcLow", (void*)&WmyImageAdcLow);
      R__insp.InspectMember("vector<float>", (void*)&WmyImageAdcLow, "WmyImageAdcLow.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "s_SC", &s_SC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Wclb_initial_Time", &Wclb_initial_Time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Wclb_initial_time", &Wclb_initial_time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Wfired_tube", &Wfired_tube);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Wstatus_readback_Time", &Wstatus_readback_Time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Wstatus_readback_time", &Wstatus_readback_time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "WDbTemp", &WDbTemp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Wsingle_time", &Wsingle_time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "WClbTime", &WClbTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "WClbTemp", &WClbTemp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_WFCTAEvent(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::WFCTAEvent : new ::WFCTAEvent;
   }
   static void *newArray_WFCTAEvent(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::WFCTAEvent[nElements] : new ::WFCTAEvent[nElements];
   }
   // Wrapper around operator delete
   static void delete_WFCTAEvent(void *p) {
      delete ((::WFCTAEvent*)p);
   }
   static void deleteArray_WFCTAEvent(void *p) {
      delete [] ((::WFCTAEvent*)p);
   }
   static void destruct_WFCTAEvent(void *p) {
      typedef ::WFCTAEvent current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_WFCTAEvent(TBuffer &buf, void *obj) {
      ((::WFCTAEvent*)obj)->::WFCTAEvent::Streamer(buf);
   }
} // end of namespace ROOT for class ::WFCTAEvent

namespace ROOT {
   void vectorlEboolgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEboolgR_Dictionary();
   static void *new_vectorlEboolgR(void *p = 0);
   static void *newArray_vectorlEboolgR(Long_t size, void *p);
   static void delete_vectorlEboolgR(void *p);
   static void deleteArray_vectorlEboolgR(void *p);
   static void destruct_vectorlEboolgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<bool>*)
   {
      vector<bool> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<bool>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<bool>", -2, "vectorbool.dll", 0,
                  typeid(vector<bool>), DefineBehavior(ptr, ptr),
                  0, &vectorlEboolgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<bool>) );
      instance.SetNew(&new_vectorlEboolgR);
      instance.SetNewArray(&newArray_vectorlEboolgR);
      instance.SetDelete(&delete_vectorlEboolgR);
      instance.SetDeleteArray(&deleteArray_vectorlEboolgR);
      instance.SetDestructor(&destruct_vectorlEboolgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<bool> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<bool>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEboolgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<bool>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEboolgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<bool> : new vector<bool>;
   }
   static void *newArray_vectorlEboolgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<bool>[nElements] : new vector<bool>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEboolgR(void *p) {
      delete ((vector<bool>*)p);
   }
   static void deleteArray_vectorlEboolgR(void *p) {
      delete [] ((vector<bool>*)p);
   }
   static void destruct_vectorlEboolgR(void *p) {
      typedef vector<bool> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<bool>

namespace ROOT {
   void vectorlEchargR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEchargR_Dictionary();
   static void *new_vectorlEchargR(void *p = 0);
   static void *newArray_vectorlEchargR(Long_t size, void *p);
   static void delete_vectorlEchargR(void *p);
   static void deleteArray_vectorlEchargR(void *p);
   static void destruct_vectorlEchargR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<char>*)
   {
      vector<char> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<char>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<char>", -2, "vector.dll", 0,
                  typeid(vector<char>), DefineBehavior(ptr, ptr),
                  0, &vectorlEchargR_Dictionary, isa_proxy, 0,
                  sizeof(vector<char>) );
      instance.SetNew(&new_vectorlEchargR);
      instance.SetNewArray(&newArray_vectorlEchargR);
      instance.SetDelete(&delete_vectorlEchargR);
      instance.SetDeleteArray(&deleteArray_vectorlEchargR);
      instance.SetDestructor(&destruct_vectorlEchargR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<char> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<char>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEchargR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<char>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEchargR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<char> : new vector<char>;
   }
   static void *newArray_vectorlEchargR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<char>[nElements] : new vector<char>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEchargR(void *p) {
      delete ((vector<char>*)p);
   }
   static void deleteArray_vectorlEchargR(void *p) {
      delete [] ((vector<char>*)p);
   }
   static void destruct_vectorlEchargR(void *p) {
      typedef vector<char> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<char>

namespace ROOT {
   void vectorlEfloatgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEfloatgR_Dictionary();
   static void *new_vectorlEfloatgR(void *p = 0);
   static void *newArray_vectorlEfloatgR(Long_t size, void *p);
   static void delete_vectorlEfloatgR(void *p);
   static void deleteArray_vectorlEfloatgR(void *p);
   static void destruct_vectorlEfloatgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<float>*)
   {
      vector<float> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<float>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<float>", -2, "vector.dll", 0,
                  typeid(vector<float>), DefineBehavior(ptr, ptr),
                  0, &vectorlEfloatgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<float>) );
      instance.SetNew(&new_vectorlEfloatgR);
      instance.SetNewArray(&newArray_vectorlEfloatgR);
      instance.SetDelete(&delete_vectorlEfloatgR);
      instance.SetDeleteArray(&deleteArray_vectorlEfloatgR);
      instance.SetDestructor(&destruct_vectorlEfloatgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<float> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<float>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEfloatgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<float>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEfloatgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<float> : new vector<float>;
   }
   static void *newArray_vectorlEfloatgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<float>[nElements] : new vector<float>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEfloatgR(void *p) {
      delete ((vector<float>*)p);
   }
   static void deleteArray_vectorlEfloatgR(void *p) {
      delete [] ((vector<float>*)p);
   }
   static void destruct_vectorlEfloatgR(void *p) {
      typedef vector<float> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<float>

namespace ROOT {
   void vectorlEintgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEintgR_Dictionary();
   static void *new_vectorlEintgR(void *p = 0);
   static void *newArray_vectorlEintgR(Long_t size, void *p);
   static void delete_vectorlEintgR(void *p);
   static void deleteArray_vectorlEintgR(void *p);
   static void destruct_vectorlEintgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<int>*)
   {
      vector<int> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<int>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<int>", -2, "prec_stl/vector", 49,
                  typeid(vector<int>), DefineBehavior(ptr, ptr),
                  0, &vectorlEintgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<int>) );
      instance.SetNew(&new_vectorlEintgR);
      instance.SetNewArray(&newArray_vectorlEintgR);
      instance.SetDelete(&delete_vectorlEintgR);
      instance.SetDeleteArray(&deleteArray_vectorlEintgR);
      instance.SetDestructor(&destruct_vectorlEintgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<int> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<int>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEintgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<int>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEintgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<int> : new vector<int>;
   }
   static void *newArray_vectorlEintgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<int>[nElements] : new vector<int>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEintgR(void *p) {
      delete ((vector<int>*)p);
   }
   static void deleteArray_vectorlEintgR(void *p) {
      delete [] ((vector<int>*)p);
   }
   static void destruct_vectorlEintgR(void *p) {
      typedef vector<int> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<int>

namespace ROOT {
   void vectorlElonggR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlElonggR_Dictionary();
   static void *new_vectorlElonggR(void *p = 0);
   static void *newArray_vectorlElonggR(Long_t size, void *p);
   static void delete_vectorlElonggR(void *p);
   static void deleteArray_vectorlElonggR(void *p);
   static void destruct_vectorlElonggR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<long>*)
   {
      vector<long> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<long>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<long>", -2, "vector.dll", 0,
                  typeid(vector<long>), DefineBehavior(ptr, ptr),
                  0, &vectorlElonggR_Dictionary, isa_proxy, 0,
                  sizeof(vector<long>) );
      instance.SetNew(&new_vectorlElonggR);
      instance.SetNewArray(&newArray_vectorlElonggR);
      instance.SetDelete(&delete_vectorlElonggR);
      instance.SetDeleteArray(&deleteArray_vectorlElonggR);
      instance.SetDestructor(&destruct_vectorlElonggR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<long> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<long>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlElonggR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<long>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlElonggR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<long> : new vector<long>;
   }
   static void *newArray_vectorlElonggR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<long>[nElements] : new vector<long>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlElonggR(void *p) {
      delete ((vector<long>*)p);
   }
   static void deleteArray_vectorlElonggR(void *p) {
      delete [] ((vector<long>*)p);
   }
   static void destruct_vectorlElonggR(void *p) {
      typedef vector<long> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<long>

namespace ROOT {
   void vectorlEshortgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEshortgR_Dictionary();
   static void *new_vectorlEshortgR(void *p = 0);
   static void *newArray_vectorlEshortgR(Long_t size, void *p);
   static void delete_vectorlEshortgR(void *p);
   static void deleteArray_vectorlEshortgR(void *p);
   static void destruct_vectorlEshortgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<short>*)
   {
      vector<short> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<short>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<short>", -2, "vector.dll", 0,
                  typeid(vector<short>), DefineBehavior(ptr, ptr),
                  0, &vectorlEshortgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<short>) );
      instance.SetNew(&new_vectorlEshortgR);
      instance.SetNewArray(&newArray_vectorlEshortgR);
      instance.SetDelete(&delete_vectorlEshortgR);
      instance.SetDeleteArray(&deleteArray_vectorlEshortgR);
      instance.SetDestructor(&destruct_vectorlEshortgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<short> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<short>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEshortgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<short>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEshortgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<short> : new vector<short>;
   }
   static void *newArray_vectorlEshortgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<short>[nElements] : new vector<short>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEshortgR(void *p) {
      delete ((vector<short>*)p);
   }
   static void deleteArray_vectorlEshortgR(void *p) {
      delete [] ((vector<short>*)p);
   }
   static void destruct_vectorlEshortgR(void *p) {
      typedef vector<short> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<short>

/********************************************************
* WFCTAEventDict.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableWFCTAEventDict();

extern "C" void G__set_cpp_environmentWFCTAEventDict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("WFCTAEvent.h");
  G__cpp_reset_tagtableWFCTAEventDict();
}
#include <new>
extern "C" int G__cpp_dllrevWFCTAEventDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* WFCTAEvent */
static int G__WFCTAEventDict_403_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   WFCTAEvent* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new WFCTAEvent[n];
     } else {
       p = new((void*) gvp) WFCTAEvent[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new WFCTAEvent;
     } else {
       p = new((void*) gvp) WFCTAEvent;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__WFCTAEventDictLN_WFCTAEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((WFCTAEvent*) G__getstructoffset())->OpenFile());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((WFCTAEvent*) G__getstructoffset())->OpenFile((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WFCTAEvent*) G__getstructoffset())->CloseFile();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((WFCTAEvent*) G__getstructoffset())->FirstBigpackage());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((WFCTAEvent*) G__getstructoffset())->Big_Package_Head());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((WFCTAEvent*) G__getstructoffset())->Little_Package());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((WFCTAEvent*) G__getstructoffset())->Big_Package_Tail());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((WFCTAEvent*) G__getstructoffset())->Status_Package((int*) G__int(libp->para[0]), (int*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((WFCTAEvent*) G__getstructoffset())->EndFile());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WFCTAEvent*) G__getstructoffset())->BranchInitial();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WFCTAEvent*) G__getstructoffset())->StatusInitial();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WFCTAEvent*) G__getstructoffset())->DealBigPackageHead();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WFCTAEvent*) G__getstructoffset())->ReadLittlePackage();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WFCTAEvent*) G__getstructoffset())->LittlePackageCalc((int*) G__int(libp->para[0]), (int*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WFCTAEvent*) G__getstructoffset())->DealBigPackageTail();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WFCTAEvent*) G__getstructoffset())->Deal21Package((short*) G__int(libp->para[0]), (short*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WFCTAEvent*) G__getstructoffset())->Deal22Package((long*) G__int(libp->para[0]), (float*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WFCTAEvent*) G__getstructoffset())->Deal23Package((long*) G__int(libp->para[0]), (long*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WFCTAEvent*) G__getstructoffset())->Deal81Package((float*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WFCTAEvent*) G__getstructoffset())->Deal82Package((float*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WFCTAEvent*) G__getstructoffset())->Deal83Package((float*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WFCTAEvent*) G__getstructoffset())->Deal84Package((float*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WFCTAEvent*) G__getstructoffset())->Deal85Package((long*) G__int(libp->para[0]), (float*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WFCTAEvent*) G__getstructoffset())->DealFPGAPackage((int*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WFCTAEvent*) G__getstructoffset())->DealF9Package((int*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WFCTAEvent*) G__getstructoffset())->SC_Channel2SiPM((short) G__int(libp->para[0]), (short) G__int(libp->para[1])
, (short*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<short>& obj = ((WFCTAEvent*) G__getstructoffset())->GetSiPM();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 108, (long) ((WFCTAEvent*) G__getstructoffset())->GetEvent());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<short>& obj = ((WFCTAEvent*) G__getstructoffset())->GetSC();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<short>& obj = ((WFCTAEvent*) G__getstructoffset())->GetChannel();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 108, (long) ((WFCTAEvent*) G__getstructoffset())->GetrabbitTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((WFCTAEvent*) G__getstructoffset())->Getrabbittime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((WFCTAEvent*) G__getstructoffset())->Getpackagenum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<bool>& obj = ((WFCTAEvent*) G__getstructoffset())->Getgain_marker();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<char>& obj = ((WFCTAEvent*) G__getstructoffset())->Getpeak();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<char>& obj = ((WFCTAEvent*) G__getstructoffset())->Getmypeak();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<short>& obj = ((WFCTAEvent*) G__getstructoffset())->GetSingle_Threshold();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<short>& obj = ((WFCTAEvent*) G__getstructoffset())->GetRecord_Threshold();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<bool>& obj = ((WFCTAEvent*) G__getstructoffset())->GetOver_Single_Marker();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<bool>& obj = ((WFCTAEvent*) G__getstructoffset())->GetOver_Record_Marker();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<float>& obj = ((WFCTAEvent*) G__getstructoffset())->GetADC_Cut();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<float>& obj = ((WFCTAEvent*) G__getstructoffset())->GetImageBaseHigh();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<float>& obj = ((WFCTAEvent*) G__getstructoffset())->GetImageBaseLow();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<float>& obj = ((WFCTAEvent*) G__getstructoffset())->GetImageAdcHigh();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<float>& obj = ((WFCTAEvent*) G__getstructoffset())->GetImageAdcLow();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<float>& obj = ((WFCTAEvent*) G__getstructoffset())->GetmyImageBaseHigh();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<float>& obj = ((WFCTAEvent*) G__getstructoffset())->GetmyImageBaseLow();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<float>& obj = ((WFCTAEvent*) G__getstructoffset())->GetmyImageAdcHigh();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<float>& obj = ((WFCTAEvent*) G__getstructoffset())->GetmyImageAdcLow();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 108, (long) ((WFCTAEvent*) G__getstructoffset())->GetclbInitialTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((WFCTAEvent*) G__getstructoffset())->GetclbInitialtime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((WFCTAEvent*) G__getstructoffset())->GetFiredTube());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 108, (long) ((WFCTAEvent*) G__getstructoffset())->GetStatusReadbackTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((WFCTAEvent*) G__getstructoffset())->GetStatusReadbacktime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) WFCTAEvent::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) WFCTAEvent::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) WFCTAEvent::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      WFCTAEvent::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const WFCTAEvent*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WFCTAEvent*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WFCTAEvent*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WFCTAEvent*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) WFCTAEvent::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) WFCTAEvent::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) WFCTAEvent::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WFCTAEventDict_403_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) WFCTAEvent::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef WFCTAEvent G__TWFCTAEvent;
static int G__WFCTAEventDict_403_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (WFCTAEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((WFCTAEvent*) (soff+(sizeof(WFCTAEvent)*i)))->~G__TWFCTAEvent();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (WFCTAEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((WFCTAEvent*) (soff))->~G__TWFCTAEvent();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* WFCTAEvent */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncWFCTAEventDict {
 public:
  G__Sizep2memfuncWFCTAEventDict(): p(&G__Sizep2memfuncWFCTAEventDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncWFCTAEventDict::*p)();
};

size_t G__get_sizep2memfuncWFCTAEventDict()
{
  G__Sizep2memfuncWFCTAEventDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceWFCTAEventDict() {

   /* Setting up class inheritance */
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableWFCTAEventDict() {

   /* Setting up typedef entry */
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__WFCTAEventDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__WFCTAEventDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__WFCTAEventDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__WFCTAEventDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__WFCTAEventDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__WFCTAEventDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__WFCTAEventDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__WFCTAEventDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__WFCTAEventDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__WFCTAEventDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<int>",117,G__get_linked_tagnum(&G__WFCTAEventDictLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__WFCTAEventDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__WFCTAEventDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__WFCTAEventDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__WFCTAEventDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* WFCTAEvent */
static void G__setup_memvarWFCTAEvent(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__WFCTAEventDictLN_WFCTAEvent));
   { WFCTAEvent *p; p=(WFCTAEvent*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__WFCTAEventDictLN_string),-1,-1,4,"fFileName=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__WFCTAEventDictLN_basic_ifstreamlEcharcOchar_traitslEchargRsPgR),G__defined_typename("ifstream"),-1,4,"fInputStream=",0,(char*)NULL);
   G__memvar_setup((void*)0,115,0,0,-1,-1,-1,4,"temp=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__WFCTAEventDictLN_vectorlElongcOallocatorlElonggRsPgR),G__defined_typename("vector<long>"),-1,4,"bigpackagehead=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__WFCTAEventDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<int>"),-1,4,"littlepackage=",0,"[126];");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__WFCTAEventDictLN_vectorlElongcOallocatorlElonggRsPgR),G__defined_typename("vector<long>"),-1,4,"bigpackagetail=",0,"[24];");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__WFCTAEventDictLN_vectorlElongcOallocatorlElonggRsPgR),G__defined_typename("vector<long>"),-1,4,"fpgapackage=",0,"[64]");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__WFCTAEventDictLN_vectorlElongcOallocatorlElonggRsPgR),G__defined_typename("vector<long>"),-1,4,"clb85package=",0,"[74]");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__WFCTAEventDictLN_vectorlElongcOallocatorlElonggRsPgR),G__defined_typename("vector<long>"),-1,4,"clb_db_package=",0,"[72]");
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"jude=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__WFCTAEventDictLN_vectorlEshortcOallocatorlEshortgRsPgR),G__defined_typename("vector<short>"),-1,4,"WSiPM=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"WEvent=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__WFCTAEventDictLN_vectorlEshortcOallocatorlEshortgRsPgR),G__defined_typename("vector<short>"),-1,4,"WSC=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__WFCTAEventDictLN_vectorlEshortcOallocatorlEshortgRsPgR),G__defined_typename("vector<short>"),-1,4,"WChannel=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"WrabbitTime=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"Wrabbittime=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"Wpackagenum=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__WFCTAEventDictLN_vectorlEboolcOallocatorlEboolgRsPgR),G__defined_typename("vector<bool>"),-1,4,"Wgain_marker=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__WFCTAEventDictLN_vectorlEcharcOallocatorlEchargRsPgR),G__defined_typename("vector<char>"),-1,4,"Wpeak=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__WFCTAEventDictLN_vectorlEcharcOallocatorlEchargRsPgR),G__defined_typename("vector<char>"),-1,4,"Wmypeak=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__WFCTAEventDictLN_vectorlEshortcOallocatorlEshortgRsPgR),G__defined_typename("vector<short>"),-1,4,"WSingle_Threshold=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__WFCTAEventDictLN_vectorlEshortcOallocatorlEshortgRsPgR),G__defined_typename("vector<short>"),-1,4,"WRecord_Threshold=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__WFCTAEventDictLN_vectorlEboolcOallocatorlEboolgRsPgR),G__defined_typename("vector<bool>"),-1,4,"WOver_Single_Marker=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__WFCTAEventDictLN_vectorlEboolcOallocatorlEboolgRsPgR),G__defined_typename("vector<bool>"),-1,4,"WOver_Record_Marker=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__WFCTAEventDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<float>"),-1,4,"WADC_Cut=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__WFCTAEventDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<float>"),-1,4,"WImageBaseHigh=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__WFCTAEventDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<float>"),-1,4,"WImageBaseLow=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__WFCTAEventDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<float>"),-1,4,"WImageAdcHigh=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__WFCTAEventDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<float>"),-1,4,"WImageAdcLow=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__WFCTAEventDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<float>"),-1,4,"WmyImageBaseHigh=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__WFCTAEventDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<float>"),-1,4,"WmyImageBaseLow=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__WFCTAEventDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<float>"),-1,4,"WmyImageAdcHigh=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__WFCTAEventDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<float>"),-1,4,"WmyImageAdcLow=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"s_SC=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"Wclb_initial_Time=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"Wclb_initial_time=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"Wfired_tube=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"Wstatus_readback_Time=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"Wstatus_readback_time=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,-1,-1,4,"WDbTemp=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"Wsingle_time=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"WClbTime=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,-1,-1,4,"WClbTemp=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__WFCTAEventDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarWFCTAEventDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncWFCTAEvent(void) {
   /* WFCTAEvent */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__WFCTAEventDictLN_WFCTAEvent));
   G__memfunc_setup("WFCTAEvent",887,G__WFCTAEventDict_403_0_1, 105, G__get_linked_tagnum(&G__WFCTAEventDictLN_WFCTAEvent), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("OpenFile",786,G__WFCTAEventDict_403_0_2, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("OpenFile",786,G__WFCTAEventDict_403_0_3, 103, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CloseFile",886,G__WFCTAEventDict_403_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FirstBigpackage",1510,G__WFCTAEventDict_403_0_5, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Big_Package_Head",1518,G__WFCTAEventDict_403_0_6, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Little_Package",1401,G__WFCTAEventDict_403_0_7, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Big_Package_Tail",1542,G__WFCTAEventDict_403_0_8, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Status_Package",1423,G__WFCTAEventDict_403_0_9, 103, -1, -1, 0, 2, 1, 1, 0, 
"I - - 0 - fpga_marker I - - 0 - package_marker", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EndFile",663,G__WFCTAEventDict_403_0_10, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("BranchInitial",1304,G__WFCTAEventDict_403_0_11, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("StatusInitial",1358,G__WFCTAEventDict_403_0_12, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DealBigPackageHead",1702,G__WFCTAEventDict_403_0_13, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadLittlePackage",1686,G__WFCTAEventDict_403_0_14, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LittlePackageCalc",1677,G__WFCTAEventDict_403_0_15, 121, -1, -1, 0, 2, 1, 1, 0, 
"I - - 0 - pulseh I - - 0 - pulsel", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DealBigPackageTail",1726,G__WFCTAEventDict_403_0_16, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Deal21Package",1157,G__WFCTAEventDict_403_0_17, 121, -1, -1, 0, 2, 1, 1, 0, 
"S - - 0 - single_thresh S - - 0 - record_thresh", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Deal22Package",1158,G__WFCTAEventDict_403_0_18, 121, -1, -1, 0, 2, 1, 1, 0, 
"L - - 0 - single_count F - - 0 - DbTemp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Deal23Package",1159,G__WFCTAEventDict_403_0_19, 121, -1, -1, 0, 2, 1, 1, 0, 
"L - - 0 - single_count L - - 0 - single_time", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Deal81Package",1163,G__WFCTAEventDict_403_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "F - - 0 - HV", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Deal82Package",1164,G__WFCTAEventDict_403_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "F - - 0 - PreTemp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Deal83Package",1165,G__WFCTAEventDict_403_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "F - - 0 - BigResistence", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Deal84Package",1166,G__WFCTAEventDict_403_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "F - - 0 - SmallResistence", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Deal85Package",1167,G__WFCTAEventDict_403_0_24, 121, -1, -1, 0, 2, 1, 1, 0, 
"L - - 0 - ClbTime F - - 0 - ClbTemp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DealFPGAPackage",1344,G__WFCTAEventDict_403_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "I - - 0 - fpgaVer", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DealF9Package",1185,G__WFCTAEventDict_403_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "I - - 0 - fpgaVer", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SC_Channel2SiPM",1337,G__WFCTAEventDict_403_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"s - - 0 - F_DB s - - 0 - mChannel "
"S - - 0 - mSiPM", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSiPM",633,G__WFCTAEventDict_403_0_28, 117, G__get_linked_tagnum(&G__WFCTAEventDictLN_vectorlEshortcOallocatorlEshortgRsPgR), G__defined_typename("vector<short>"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEvent",802,G__WFCTAEventDict_403_0_29, 108, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSC",438,G__WFCTAEventDict_403_0_30, 117, G__get_linked_tagnum(&G__WFCTAEventDictLN_vectorlEshortcOallocatorlEshortgRsPgR), G__defined_typename("vector<short>"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetChannel",985,G__WFCTAEventDict_403_0_31, 117, G__get_linked_tagnum(&G__WFCTAEventDictLN_vectorlEshortcOallocatorlEshortgRsPgR), G__defined_typename("vector<short>"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetrabbitTime",1315,G__WFCTAEventDict_403_0_32, 108, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Getrabbittime",1347,G__WFCTAEventDict_403_0_33, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Getpackagenum",1340,G__WFCTAEventDict_403_0_34, 115, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Getgain_marker",1440,G__WFCTAEventDict_403_0_35, 117, G__get_linked_tagnum(&G__WFCTAEventDictLN_vectorlEboolcOallocatorlEboolgRsPgR), G__defined_typename("vector<bool>"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Getpeak",705,G__WFCTAEventDict_403_0_36, 117, G__get_linked_tagnum(&G__WFCTAEventDictLN_vectorlEcharcOallocatorlEchargRsPgR), G__defined_typename("vector<char>"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Getmypeak",935,G__WFCTAEventDict_403_0_37, 117, G__get_linked_tagnum(&G__WFCTAEventDictLN_vectorlEcharcOallocatorlEchargRsPgR), G__defined_typename("vector<char>"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSingle_Threshold",1934,G__WFCTAEventDict_403_0_38, 117, G__get_linked_tagnum(&G__WFCTAEventDictLN_vectorlEshortcOallocatorlEshortgRsPgR), G__defined_typename("vector<short>"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRecord_Threshold",1931,G__WFCTAEventDict_403_0_39, 117, G__get_linked_tagnum(&G__WFCTAEventDictLN_vectorlEshortcOallocatorlEshortgRsPgR), G__defined_typename("vector<short>"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetOver_Single_Marker",2110,G__WFCTAEventDict_403_0_40, 117, G__get_linked_tagnum(&G__WFCTAEventDictLN_vectorlEboolcOallocatorlEboolgRsPgR), G__defined_typename("vector<bool>"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetOver_Record_Marker",2107,G__WFCTAEventDict_403_0_41, 117, G__get_linked_tagnum(&G__WFCTAEventDictLN_vectorlEboolcOallocatorlEboolgRsPgR), G__defined_typename("vector<bool>"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetADC_Cut",883,G__WFCTAEventDict_403_0_42, 117, G__get_linked_tagnum(&G__WFCTAEventDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR), G__defined_typename("vector<float>"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetImageBaseHigh",1534,G__WFCTAEventDict_403_0_43, 117, G__get_linked_tagnum(&G__WFCTAEventDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR), G__defined_typename("vector<float>"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetImageBaseLow",1456,G__WFCTAEventDict_403_0_44, 117, G__get_linked_tagnum(&G__WFCTAEventDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR), G__defined_typename("vector<float>"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetImageAdcHigh",1419,G__WFCTAEventDict_403_0_45, 117, G__get_linked_tagnum(&G__WFCTAEventDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR), G__defined_typename("vector<float>"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetImageAdcLow",1341,G__WFCTAEventDict_403_0_46, 117, G__get_linked_tagnum(&G__WFCTAEventDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR), G__defined_typename("vector<float>"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetmyImageBaseHigh",1764,G__WFCTAEventDict_403_0_47, 117, G__get_linked_tagnum(&G__WFCTAEventDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR), G__defined_typename("vector<float>"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetmyImageBaseLow",1686,G__WFCTAEventDict_403_0_48, 117, G__get_linked_tagnum(&G__WFCTAEventDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR), G__defined_typename("vector<float>"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetmyImageAdcHigh",1649,G__WFCTAEventDict_403_0_49, 117, G__get_linked_tagnum(&G__WFCTAEventDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR), G__defined_typename("vector<float>"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetmyImageAdcLow",1571,G__WFCTAEventDict_403_0_50, 117, G__get_linked_tagnum(&G__WFCTAEventDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR), G__defined_typename("vector<float>"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetclbInitialTime",1706,G__WFCTAEventDict_403_0_51, 108, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetclbInitialtime",1738,G__WFCTAEventDict_403_0_52, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFiredTube",1178,G__WFCTAEventDict_403_0_53, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStatusReadbackTime",2112,G__WFCTAEventDict_403_0_54, 108, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStatusReadbacktime",2144,G__WFCTAEventDict_403_0_55, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__WFCTAEventDict_403_0_56, 85, G__get_linked_tagnum(&G__WFCTAEventDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&WFCTAEvent::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__WFCTAEventDict_403_0_57, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&WFCTAEvent::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__WFCTAEventDict_403_0_58, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&WFCTAEvent::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__WFCTAEventDict_403_0_59, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&WFCTAEvent::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__WFCTAEventDict_403_0_60, 85, G__get_linked_tagnum(&G__WFCTAEventDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__WFCTAEventDict_403_0_61, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__WFCTAEventDict_403_0_62, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__WFCTAEventDict_403_0_63, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__WFCTAEventDict_403_0_64, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&WFCTAEvent::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__WFCTAEventDict_403_0_65, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&WFCTAEvent::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__WFCTAEventDict_403_0_66, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&WFCTAEvent::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__WFCTAEventDict_403_0_67, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&WFCTAEvent::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~WFCTAEvent", 1013, G__WFCTAEventDict_403_0_68, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncWFCTAEventDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalWFCTAEventDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcWFCTAEventDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__WFCTAEventDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__WFCTAEventDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__WFCTAEventDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__WFCTAEventDictLN_vectorlEcharcOallocatorlEchargRsPgR = { "vector<char,allocator<char> >" , 99 , -1 };
G__linked_taginfo G__WFCTAEventDictLN_vectorlEshortcOallocatorlEshortgRsPgR = { "vector<short,allocator<short> >" , 99 , -1 };
G__linked_taginfo G__WFCTAEventDictLN_vectorlElongcOallocatorlElonggRsPgR = { "vector<long,allocator<long> >" , 99 , -1 };
G__linked_taginfo G__WFCTAEventDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR = { "vector<float,allocator<float> >" , 99 , -1 };
G__linked_taginfo G__WFCTAEventDictLN_vectorlEboolcOallocatorlEboolgRsPgR = { "vector<bool,allocator<bool> >" , 99 , -1 };
G__linked_taginfo G__WFCTAEventDictLN_basic_ifstreamlEcharcOchar_traitslEchargRsPgR = { "basic_ifstream<char,char_traits<char> >" , 99 , -1 };
G__linked_taginfo G__WFCTAEventDictLN_string = { "string" , 99 , -1 };
G__linked_taginfo G__WFCTAEventDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__WFCTAEventDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__WFCTAEventDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__WFCTAEventDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__WFCTAEventDictLN_WFCTAEvent = { "WFCTAEvent" , 99 , -1 };
G__linked_taginfo G__WFCTAEventDictLN_vectorlEintcOallocatorlEintgRsPgR = { "vector<int,allocator<int> >" , 99 , -1 };
G__linked_taginfo G__WFCTAEventDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<int,allocator<int> >::iterator>" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableWFCTAEventDict() {
  G__WFCTAEventDictLN_TClass.tagnum = -1 ;
  G__WFCTAEventDictLN_TBuffer.tagnum = -1 ;
  G__WFCTAEventDictLN_TMemberInspector.tagnum = -1 ;
  G__WFCTAEventDictLN_vectorlEcharcOallocatorlEchargRsPgR.tagnum = -1 ;
  G__WFCTAEventDictLN_vectorlEshortcOallocatorlEshortgRsPgR.tagnum = -1 ;
  G__WFCTAEventDictLN_vectorlElongcOallocatorlElonggRsPgR.tagnum = -1 ;
  G__WFCTAEventDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR.tagnum = -1 ;
  G__WFCTAEventDictLN_vectorlEboolcOallocatorlEboolgRsPgR.tagnum = -1 ;
  G__WFCTAEventDictLN_basic_ifstreamlEcharcOchar_traitslEchargRsPgR.tagnum = -1 ;
  G__WFCTAEventDictLN_string.tagnum = -1 ;
  G__WFCTAEventDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__WFCTAEventDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__WFCTAEventDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__WFCTAEventDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__WFCTAEventDictLN_WFCTAEvent.tagnum = -1 ;
  G__WFCTAEventDictLN_vectorlEintcOallocatorlEintgRsPgR.tagnum = -1 ;
  G__WFCTAEventDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableWFCTAEventDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__WFCTAEventDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__WFCTAEventDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__WFCTAEventDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__WFCTAEventDictLN_vectorlEcharcOallocatorlEchargRsPgR);
   G__get_linked_tagnum_fwd(&G__WFCTAEventDictLN_vectorlEshortcOallocatorlEshortgRsPgR);
   G__get_linked_tagnum_fwd(&G__WFCTAEventDictLN_vectorlElongcOallocatorlElonggRsPgR);
   G__get_linked_tagnum_fwd(&G__WFCTAEventDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR);
   G__get_linked_tagnum_fwd(&G__WFCTAEventDictLN_vectorlEboolcOallocatorlEboolgRsPgR);
   G__get_linked_tagnum_fwd(&G__WFCTAEventDictLN_basic_ifstreamlEcharcOchar_traitslEchargRsPgR);
   G__get_linked_tagnum_fwd(&G__WFCTAEventDictLN_string);
   G__get_linked_tagnum_fwd(&G__WFCTAEventDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__WFCTAEventDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__WFCTAEventDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__WFCTAEventDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__WFCTAEventDictLN_WFCTAEvent),sizeof(WFCTAEvent),-1,1280,(char*)NULL,G__setup_memvarWFCTAEvent,G__setup_memfuncWFCTAEvent);
   G__get_linked_tagnum_fwd(&G__WFCTAEventDictLN_vectorlEintcOallocatorlEintgRsPgR);
   G__get_linked_tagnum_fwd(&G__WFCTAEventDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR);
}
extern "C" void G__cpp_setupWFCTAEventDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupWFCTAEventDict()");
  G__set_cpp_environmentWFCTAEventDict();
  G__cpp_setup_tagtableWFCTAEventDict();

  G__cpp_setup_inheritanceWFCTAEventDict();

  G__cpp_setup_typetableWFCTAEventDict();

  G__cpp_setup_memvarWFCTAEventDict();

  G__cpp_setup_memfuncWFCTAEventDict();
  G__cpp_setup_globalWFCTAEventDict();
  G__cpp_setup_funcWFCTAEventDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncWFCTAEventDict();
  return;
}
class G__cpp_setup_initWFCTAEventDict {
  public:
    G__cpp_setup_initWFCTAEventDict() { G__add_setup_func("WFCTAEventDict",(G__incsetup)(&G__cpp_setupWFCTAEventDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initWFCTAEventDict() { G__remove_setup_func("WFCTAEventDict"); }
};
G__cpp_setup_initWFCTAEventDict G__cpp_setup_initializerWFCTAEventDict;

